@import "./variables.scss";

@mixin flex(
  $direction: column,
  $justifyContent: flex-start,
  $alignItems: stretch
) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justifyContent;
  align-items: $alignItems;
}

@mixin transition($propertyName: all, $timeFunction: ease) {
  transition: $propertyName $default-transition-time $timeFunction;
}

@mixin quickTransition($propertyName: all, $timeFunction: ease) {
  transition: $propertyName $quick-transition-time $timeFunction;
}

@mixin centerAbsolutely($centerDirection: center) {
  position: absolute;

  @if $centerDirection == vertical {
    top: 50%;
    transform: translateY(-50%);
  } @else if $centerDirection == horizontal {
    left: 50%;
    transform: translateX(-50%);
  } @else {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

%scrollableComponent {
  & {
    overflow-x: hidden;
    overflow-y: scroll;
    overflow-x: -moz-scrollbars-none;
    -ms-overflow-style: none;
  }
  &::-webkit-scrollbar {
    width: 0 !important;
  }
}

%textSelection {
  &::selection {
    background-color: $accent;
  }
}

%invertedTextSelection {
  &::selection {
    background-color: $white-color;
  }
}

@mixin transition($propertyName: all, $timeFunction: ease) {
  transition: $propertyName $default-transition-time $timeFunction;
}

@mixin quickTransition($propertyName: all, $timeFunction: ease) {
  transition: $propertyName $quick-transition-time $timeFunction;
}

@mixin perspectiveCellHover(
  $transitionDistance: 6,
  $box-shadow-color: $accent
) {
  &:hover {
    $box-shadow: 0px 0px $box-shadow-color;

    transform: translate(#{$transitionDistance}px, #{-$transitionDistance}px);
    font-weight: 500;

    @for $i from 1 through $transitionDistance {
      $box-shadow: #{$box-shadow}, $box-shadow-color #{-$i}px #{$i}px;
    }

    box-shadow: $box-shadow;
  }
}

@mixin includeMarginForChildren($marginOffset: 1.25em) {
  & > * {
    &:not(:last-child) {
      margin-bottom: $marginOffset;
    }
  }
}

@function getRidOfUnitType($value) {
  @return $value / ($value * 0 + 1);
}

@mixin mid-fluid-value(
  $propertyName,
  $min-value,
  $max-value,
  $min-width: $laptop-screen-width,
  $max-width: $desktop-screen-width
) {
  & {
    #{$propertyName}: $max-value;

    @media screen and (min-width: $min-width) and (max-width: $max-width) {
      #{$propertyName}: calc(
        #{$min-value} + (16 * #{getRidOfUnitType($max-value - $min-value)}) * ((
                100vw - #{$min-width}
              ) / #{getRidOfUnitType($max-width - $min-width)})
      );
    }

    @media screen and (max-width: #{$min-width - 1}) {
      #{$propertyName}: $min-value;
    }
  }
}

@mixin laptop-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $big-tablet-screen-width,
    $laptop-screen-width
  );
}

@mixin big-tablet-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $medium-tablet-screen-width,
    $big-tablet-screen-width
  );
}

@mixin small-tablet-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $big-mobile-screen-width,
    $small-tablet-screen-width
  );
}

@mixin medium-tablet-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $small-tablet-screen-width,
    $medium-tablet-screen-width
  );
}

@mixin tablet-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $small-tablet-screen-width,
    $big-tablet-screen-width
  );
}

@mixin big-mobile-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $medium-mobile-screen-width,
    $big-mobile-screen-width
  );
}

@mixin medium-mobile-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    $small-mobile-screen-width,
    $medium-mobile-screen-width
  );
}

@mixin small-mobile-fluid-value($propertyName, $min-value, $max-value) {
  @include mid-fluid-value(
    $propertyName,
    $min-value,
    $max-value,
    1px,
    $small-mobile-screen-width
  );
}

@mixin onChosenWidth(
  $width: $big-tablet-screen-width,
  $propertyName: font-size,
  $newValue: 0.9rem,
  $oldValue: 1rem
) {
  @media screen and (min-width: $width + 1) {
    #{$propertyName}: $oldValue;
  }

  @media screen and (max-width: $width) {
    #{$propertyName}: $newValue;
  }
}

@mixin onBigTabletWidth($propertyName, $newValue, $oldValue) {
  @include onChosenWidth(
    $big-tablet-screen-width,
    $propertyName,
    $newValue,
    $oldValue
  );
}

@mixin onMediumTabletWidth($propertyName, $newValue, $oldValue) {
  @include onChosenWidth(
    $medium-tablet-screen-width,
    $propertyName,
    $newValue,
    $oldValue
  );
}

@mixin onSmallTabletWidth($propertyName, $newValue, $oldValue) {
  @include onChosenWidth(
    $small-tablet-screen-width,
    $propertyName,
    $newValue,
    $oldValue
  );
}

@mixin onBigMobileWidth($propertyName, $newValue, $oldValue) {
  @include onChosenWidth(
    $big-mobile-screen-width,
    $propertyName,
    $newValue,
    $oldValue
  );
}

@mixin onMediumMobileWidth($propertyName, $newValue, $oldValue) {
  @include onChosenWidth(
    $medium-mobile-screen-width,
    $propertyName,
    $newValue,
    $oldValue
  );
}

@mixin onSmallMobileWidth($propertyName, $newValue, $oldValue) {
  @include onChosenWidth(
    $small-mobile-screen-width,
    $propertyName,
    $newValue,
    $oldValue
  );
}
